{"version":3,"sources":["pages/home/Home.js","components/nav/Nav.js","pages/about/About.js","pages/contact/Contact.js","pages/about/code/Code.js","pages/about/design/Design.js","serviceWorker.js","index.js","router/router.js"],"names":["Home","className","href","target","rel","Nav","exact","to","About","Contact","Code","Design","Boolean","window","location","hostname","match","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAEe,SAASA,IACtB,OACE,6BACE,4CACA,uBACEC,UAAU,WACVC,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,gBCHS,SAASC,IACtB,OACE,6BACE,6BACE,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAChB,+CAKJ,6BACE,4BACE,4BACE,kBAAC,IAAD,CAASA,GAAG,UAAS,uCAEvB,4BACE,kBAAC,IAAD,CAASA,GAAG,YAAW,4CChBpB,SAASC,IACtB,OACE,6BACE,6CACA,uCACA,4BACE,4BACE,kBAAC,IAAD,CAAMD,GAAG,iBAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,eAAT,WCXK,SAASE,IACtB,OACE,6BACE,gDCHS,SAASC,IACtB,OACE,6BACE,6CCHS,SAASC,IACtB,OACE,6BACE,+C,MCOcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,KACE,mBCFW,WACb,OACE,oCACE,kBAACb,EAAD,MACA,6BACA,kBAAC,IAAD,CAAOC,OAAK,EAACa,KAAK,IAAIC,UAAWpB,IACjC,kBAAC,IAAD,CAAOmB,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,WAAWC,UAAWX,IAClC,kBAAC,IAAD,CAAOU,KAAK,cAAcC,UAAWV,IACrC,kBAAC,IAAD,CAAOS,KAAK,gBAAgBC,UAAWT,ODPzC,OAEFU,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0ea4bd81.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Home() {\r\n  return (\r\n    <div>\r\n      <h2>HOME is here</h2>\r\n      <a\r\n        className=\"App-link\"\r\n        href=\"https://reactjs.org\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Learn React\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport default function Nav() {\r\n  return (\r\n    <nav>\r\n      <div>\r\n        <NavLink exact to=\"/\">\r\n          <h2>\r\n            GPE / STARTER\r\n          </h2>\r\n        </NavLink>\r\n      </div>\r\n      <div>\r\n        <ul>\r\n          <li>\r\n            <NavLink to=\"/about\"><h3>ABOUT</h3></NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/contact\"><h3>CONTACT</h3></NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      <h2>ABOUT is here</h2>\r\n      <h3>PROJETS</h3>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/about/design\">DESIGN</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/about/code\">CODE</Link>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Contact() {\r\n  return (\r\n    <div>\r\n      <h2>CONTACT is here</h2>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Code() {\r\n  return (\r\n    <div>\r\n      <h2>CODE is here</h2>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Design() {\r\n  return (\r\n    <div>\r\n      <h2>DESIGN is here</h2>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport ReactRouter from \"./router/router\";\n\nimport \"./styles/index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <ReactRouter />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Home from \"../pages/home/Home\";\r\nimport Nav from \"../components/nav/Nav\";\r\nimport About from \"../pages/about/About\";\r\nimport Contact from \"../pages/contact/Contact\";\r\nimport Code from \"../pages/about/code/Code\"; \r\nimport Design from \"../pages/about/design/Design\"\r\n\r\nexport default function ReactRouter() {\r\n  return (\r\n    <>\r\n      <Nav />\r\n      <hr />\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route path=\"/about\" component={About} />\r\n      <Route path=\"/contact\" component={Contact} />\r\n      <Route path=\"/about/code\" component={Code} />\r\n      <Route path=\"/about/design\" component={Design} />\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}